# -*- coding: utf-8 -*-
from pathlib import Path

path = Path("resources/views/livewire/chat-box.blade.php")
text = path.read_text()
insertion_point = text.index("        async createConversation()")
new_methods = "        ensureUserInList(user) {\n            if (!user || !user.id) {\n                return;\n            }\n\n            if (!(this.users || []).some(existing => existing.id === user.id)) {\n                this.users.push(user);\n                this.users.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n            }\n        },\n\n        setSelectedUser(userId) {\n            if (userId === null || userId === undefined || userId === '') {\n                this.selectedUserId = null;\n                this.selectedUser = null;\n                this.impersonateUserId = null;\n                return;\n            }\n\n            const parsedId = Number(userId);\n            if (Number.isNaN(parsedId)) {\n                this.selectedUserId = null;\n                this.selectedUser = null;\n                this.impersonateUserId = null;\n                return;\n            }\n\n            this.selectedUserId = parsedId;\n            this.impersonateUserId = parsedId;\n            this.selectedUser = (this.users || []).find(user => user.id === parsedId) || null;\n        },\n\n        async refreshUsers() {\n            if (!this.isSuperAdmin) {\n                return;\n            }\n\n            this.isLoadingUsers = true;\n\n            try {\n                const params = new URLSearchParams();\n                if (this.userSearch) {\n                    params.set('search', this.userSearch);\n                }\n\n                const response = await fetch(`/mon-compte/ai/users?${params.toString()}`);\n                const data = await response.json();\n\n                if (data.success) {\n                    this.users = Array.isArray(data.users) ? data.users : [];\n                    if (this.currentUser) {\n                        this.ensureUserInList(this.currentUser);\n                    }\n\n                    if (this.selectedUserId) {\n                        this.setSelectedUser(this.selectedUserId);\n                    } else if (this.users.length > 0) {\n                        this.setSelectedUser(this.users[0].id);\n                    }\n                }\n            } catch (error) {\n                console.error('Failed to load users', error);\n            } finally {\n                this.isLoadingUsers = false;\n            }\n        },\n\n        async fetchConversations() {\n            if (this.isSuperAdmin && !this.selectedUserId) {\n                this.conversations = [];\n                return;\n            }\n\n            this.isLoadingConversations = true;\n\n            try {\n                const params = new URLSearchParams();\n                if (this.isSuperAdmin && this.selectedUserId) {\n                    params.set('user_id', this.selectedUserId);\n                }\n\n                const response = await fetch(`/mon-compte/ai/conversations?${params.toString()}`);\n                const data = await response.json();\n\n                if (data.success) {\n                    this.conversations = Array.isArray(data.conversations) ? data.conversations : [];\n\n                    if (!this.conversationId && this.conversations.length > 0) {\n                        const firstConversation = this.conversations[0];\n                        this.selectedConversationId = firstConversation.id;\n                        await this.loadConversation(firstConversation.id);\n                    } else if (this.conversationId) {\n                        this.selectedConversationId = this.conversationId;\n                    }\n                }\n            } catch (error) {\n                console.error('Failed to load conversations', error);\n            } finally {\n                this.isLoadingConversations = false;\n            }\n        },\n\n        formatConversationLabel(conversation) {\n            if (!conversation) {\n                return '';\n            }\n\n            const owner = conversation.user;\n            const ownerLabel = owner ? `${owner.name || 'Utilisateur'}${owner.superadmin ? ' (Superadmin)' : ''}` : 'Utilisateur';\n            const trainer = conversation.trainer ? conversation.trainer.toUpperCase() : 'DEFAULT';\n            return `#${conversation.id} · ${ownerLabel} · ${trainer}`;\n        },\n\n        async loadConversation(conversationId) {\n            if (!conversationId) {\n                this.messages = [];\n                this.conversationId = null;\n                this.selectedConversationId = null;\n                return;\n            }\n\n            this.error = null;\n\n            try {\n                const response = await fetch(`/mon-compte/ai/conversations/${conversationId}`);\n                const data = await response.json();\n\n                if (!data.success) {\n                    this.error = data.message || 'Impossible de charger la conversation';\n                    return;\n                }\n\n                const conversation = data.conversation || {};\n                this.conversationId = conversation.id;\n                this.selectedConversationId = conversation.id;\n                this.trainer = conversation.trainer || this.trainer;\n                this.selectedTrainer = this.trainer;\n\n                if (this.isSuperAdmin && conversation.user) {\n                    this.ensureUserInList(conversation.user);\n                    this.setSelectedUser(conversation.user.id);\n                }\n\n                this.messages = Array.isArray(data.messages)\n                    ? data.messages.map(message => ({\n                        role: message.role,\n                        content: message.content,\n                        created_at: message.created_at,\n                        user: message.user || null,\n                        buttons: message.buttons || [],\n                    }))\n                    : [];\n\n                this.scrollToBottom();\n            } catch (error) {\n                console.error('Failed to load conversation', error);\n                this.error = 'Impossible de charger la conversation sélectionnée';\n            }\n        },\n\n        async selectConversation(conversationId) {\n            if (!conversationId) {\n                return;\n            }\n\n            await this.loadConversation(conversationId);\n            if (!this.isOpen) {\n                this.isOpen = true;\n            }\n        },\n\n        async onUserSelect(event) {\n            const value = event?.target?.value ?? null;\n            this.setSelectedUser(value);\n            this.conversationId = null;\n            this.selectedConversationId = null;\n            this.messages = [];\n            await this.fetchConversations();\n        },\n\n        async onConversationSelect(event) {\n            const value = Number(event?.target?.value ?? 0);\n            if (!value || Number.isNaN(value)) {\n                return;\n            }\n\n            await this.selectConversation(value);\n        },\n\n        async startNewConversation() {\n            this.conversationId = null;\n            this.selectedConversationId = null;\n            this.messages = [];\n            await this.createConversation();\n        },\n\n"
text = text[:insertion_point] + new_methods + text[insertion_point:]
path.write_text(text)
